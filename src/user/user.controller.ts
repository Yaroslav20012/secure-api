import { Controller, Get, Delete, Param, UseGuards, Req} from '@nestjs/common';
import { JwtAuthGuard } from '../auth/jwt-auth.guard';
import { UserRepository } from './user.repository';


@UseGuards(JwtAuthGuard)
@Controller('user')
export class UserController {
  constructor(private readonly userRepository: UserRepository) {}
  
  @UseGuards(JwtAuthGuard)
  @Get('all')
  async getAllUsers(@Req() req: any) {
    console.log('üîê req.user:', req.user);
    const users = await this.userRepository.getAllUsers();
    return users;
  }

  @UseGuards(JwtAuthGuard)
  @Delete(':id')
  async deleteUser(@Param('id') id: number, @Req() req: any) {
    const requestingUser = req.user;

    if (!requestingUser) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–æ–∫–µ–Ω–∞');
    }

    if (requestingUser.id === id) {
      throw new Error('–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è');
    }

    const user = await this.userRepository.getUserById(id);
    if (!user) {
      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    await this.userRepository.deleteUser(user);
    return { message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω' };
  }
}
