import { Controller, Post, Body, Res, Request, BadRequestException, HttpException, HttpStatus } from '@nestjs/common';
import { Response } from 'express';
import { AuthService } from './auth.service';
import * as jwt from 'jsonwebtoken';
import { SanitizerService } from '../utils/sanitizer.service'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º SanitizerService
import { UserRepository } from 'src/user/user.repository';

@Controller('auth')
export class AuthController {
  constructor(
    private readonly authService: AuthService,
    private readonly sanitizerService: SanitizerService// –ò–Ω–∂–µ–∫—Ç–∏—Ä—É–µ–º SanitizerService
  ) {}

  @Post('register')
  async register(@Body() dto: { email: string; password: string }) {
    try {      
      
      // –û—á–∏—â–∞–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      const sanitizedEmail = this.sanitizerService.sanitize(dto.email);
      const sanitizedPassword = this.sanitizerService.sanitize(dto.password);

      const decryptedEmail = this.authService.decryptWithPrivateKey(sanitizedEmail);
      const decryptedPassword = this.authService.decryptWithPrivateKey(sanitizedPassword);      

      if (!decryptedEmail || !decryptedPassword) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ');
      }

      await this.authService.register(decryptedEmail, decryptedPassword);
      return { message: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞' };
    } catch (e) {
      console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', e.message);

      // –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
      if (e.message.includes('—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')) {
        throw new HttpException(e.message, HttpStatus.BAD_REQUEST);
      }
      
      throw new HttpException('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', HttpStatus.INTERNAL_SERVER_ERROR);
    }
  }

  @Post('login')
  async login(
    @Body() dto: { email: string; password: string },
    @Res({ passthrough: true }) response: Response
  ) {
    console.log('üì© –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—Ö–æ–¥:', dto); 

    // –û—á–∏—â–∞–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const sanitizedEmail = this.sanitizerService.sanitize(dto.email);
    const sanitizedPassword = this.sanitizerService.sanitize(dto.password);

    console.log('üßº –û—á–∏—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', { sanitizedEmail, sanitizedPassword });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—á–∏—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø—É—Å—Ç—ã–µ
    if (!sanitizedEmail || !sanitizedPassword) {
      throw new Error('–û—à–∏–±–∫–∞: –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏');
    }

    const decryptedEmail = this.authService.decryptWithPrivateKey(sanitizedEmail);
    const decryptedPassword = this.authService.decryptWithPrivateKey(sanitizedPassword);

    

    console.log('üîì –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π email:', decryptedEmail);
    console.log('üîì –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å:', decryptedPassword);

    if (!decryptedEmail || !decryptedPassword) {
      console.error('üö´ –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ');
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ');
    }

    const user = await this.authService.validateUser(decryptedEmail, decryptedPassword);
    const tokens = this.authService.generateTokens(user);

    console.log('üîë –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω:', tokens.accessToken);
    console.log('üç™ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω refresh_token –≤ –∫—É–∫—É');

    response.cookie('refresh_token', tokens.refreshToken, {
      httpOnly: true,
      secure: process.env.NODE_ENV === 'production',
      sameSite: 'strict',
      maxAge: 7 * 24 * 60 * 60 * 1000 // 7 –¥–Ω–µ–π
    });

    console.log('–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω refresh_token', tokens.refreshToken);
    console.log('üîê JWT_SECRET:', process.env.JWT_SECRET);
    console.log('üîê REFRESH_TOKEN_SECRET:', process.env.JWT_REFRESH_SECRET);

    return {
      token: tokens.accessToken,
      refreshToken: tokens.refreshToken,
      email: user.email,
      id: user.id,
      role: user.role
    };
  }

  @Post('refresh')
  async refresh(@Request() req, @Res({ passthrough: true }) res: Response) {
    const refreshToken = req.cookies['refresh_token'] || req.headers['x-refresh-token'];

    if (!refreshToken) {
      throw new Error('Refresh token –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
    }

    const refreshTokenSecret = process.env.JWT_REFRESH_SECRET;
    if (!refreshTokenSecret) {
      throw new Error('JWT_REFRESH_SECRET –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    } 

    try {
      const decoded = jwt.verify(refreshToken, refreshTokenSecret);
      const user = await this.authService.validateUserByToken(decoded);
      const tokens = this.authService.generateTokens(user);

      res.cookie('refresh_token', tokens.refreshToken, {
        httpOnly: true,
        secure: process.env.NODE_ENV === 'production',
        sameSite: 'strict',
        maxAge: 7 * 24 * 60 * 60 * 1000
      });

      return { accessToken: tokens.accessToken };
    } catch (e) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', e.message);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω');
    }
  }
}
